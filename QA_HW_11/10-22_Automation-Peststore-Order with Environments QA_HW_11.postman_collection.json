{
	"info": {
		"_postman_id": "71efecb4-825d-4be2-9662-403aa0f7812f",
		"name": "10-22_Automation-Peststore-Order with Environments QA_HW_11",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24859873"
	},
	"item": [
		{
			"name": "Place an order for a pet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response size is less than 500 B\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Methods\", \"GET, POST, DELETE, PUT\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Headers\", \"Content-Type, api_key, Authorization\");\r",
							"    pm.response.to.have.header(\"Server\", \"Jetty(9.2.9.v20150224)\");\r",
							"});\r",
							"\r",
							"// create const jsonData to improve and short the code\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"ID is correct\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"ID\"));\r",
							"});\r",
							"pm.test(\"PETID is correct\", function () {\r",
							"    pm.expect(jsonData.petId).to.eql(pm.environment.get(\"PETID\"));\r",
							"});\r",
							"pm.test(\"Quantity is correct\", function () {\r",
							"    pm.expect(jsonData.quantity).to.eql(pm.environment.get(\"QTY\"));\r",
							"});\r",
							"pm.test(\"Status is correct\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(pm.environment.get(\"STATUS\"));\r",
							"});\r",
							"pm.test(\"Order is not been shipped yet\", function () {\r",
							"    pm.expect(jsonData.complete).to.eql(pm.environment.get(\"COMPLETE\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be Okay to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should be in the correct format\", function () {\r",
							"    let jsonResponse = pm.response.json();\r",
							"    pm.expect(jsonResponse.id).to.be.a('number');\r",
							"    pm.expect(jsonResponse.petId).to.be.a('number');\r",
							"    pm.expect(jsonResponse.quantity).to.be.a('number');\r",
							"    pm.expect(jsonResponse.shipDate).to.be.a('string');\r",
							"    pm.expect(jsonResponse.status).to.be.a('string');\r",
							"    pm.expect(jsonResponse.complete).to.be.a('boolean');\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.clear()\r",
							"\r",
							"pm.environment.set(\"ID\", Math.floor(Math.random() * 101));\r",
							"\r",
							"pm.environment.set(\"PETID\", Math.floor(Math.random() * 101));\r",
							"\r",
							"pm.environment.set(\"QTY\", Math.floor(Math.random() * 101));\r",
							"\r",
							"pm.environment.set(\"SHIPDATE\", new Date());\r",
							"\r",
							"let statusPick = [\"placed\", \"approved\", \"delivered\"];\r",
							"let randomStatus = statusPick[Math.floor(Math.random() * statusPick.length)];\r",
							"pm.environment.set(\"STATUS\", randomStatus);\r",
							"\r",
							"let completePick = [true, false];\r",
							"let randomComplete = completePick[Math.floor(Math.random() * completePick.length)];\r",
							"pm.environment.set(\"COMPLETE\", randomComplete);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": {{ID}},\r\n    \"petId\": {{PETID}},\r\n    \"quantity\": {{QTY}},\r\n    \"shipDate\": {{SHIPDATE}},\r\n    \"status\": \"{{STATUS}}\",\r\n    \"complete\": {{COMPLETE}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Find purchase order by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response size is less than 500 B\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Methods\", \"GET, POST, DELETE, PUT\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Headers\", \"Content-Type, api_key, Authorization\");\r",
							"    pm.response.to.have.header(\"Server\", \"Jetty(9.2.9.v20150224)\");\r",
							"});\r",
							"\r",
							"// create const jsonData to improve and short the code\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"ID is correct\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"ID\"));\r",
							"});\r",
							"pm.test(\"PETID is correct\", function () {\r",
							"    pm.expect(jsonData.petId).to.eql(pm.environment.get(\"PETID\"));\r",
							"});\r",
							"pm.test(\"Quantity is correct\", function () {\r",
							"    pm.expect(jsonData.quantity).to.eql(pm.environment.get(\"QTY\"));\r",
							"});\r",
							"pm.test(\"Status is correct\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(pm.environment.get(\"STATUS\"));\r",
							"});\r",
							"pm.test(\"Order is not been shipped yet\", function () {\r",
							"    pm.expect(jsonData.complete).to.eql(pm.environment.get(\"COMPLETE\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be Okay to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should be in the correct format\", function () {\r",
							"    let jsonResponse = pm.response.json();\r",
							"    pm.expect(jsonResponse.id).to.be.a('number');\r",
							"    pm.expect(jsonResponse.petId).to.be.a('number');\r",
							"    pm.expect(jsonResponse.quantity).to.be.a('number');\r",
							"    pm.expect(jsonResponse.shipDate).to.be.a('string');\r",
							"    pm.expect(jsonResponse.status).to.be.a('string');\r",
							"    pm.expect(jsonResponse.complete).to.be.a('boolean');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order/{{ID}}",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order",
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete purchase order by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response size is less than 500 B\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Methods\", \"GET, POST, DELETE, PUT\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Headers\", \"Content-Type, api_key, Authorization\");\r",
							"    pm.response.to.have.header(\"Server\", \"Jetty(9.2.9.v20150224)\");\r",
							"});\r",
							"\r",
							"// create const jsonData to improve and short the code\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"ID is correct\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"ID\"));\r",
							"});\r",
							"pm.test(\"PETID is correct\", function () {\r",
							"    pm.expect(jsonData.petId).to.eql(pm.environment.get(\"PETID\"));\r",
							"});\r",
							"pm.test(\"Quantity is correct\", function () {\r",
							"    pm.expect(jsonData.quantity).to.eql(pm.environment.get(\"QTY\"));\r",
							"});\r",
							"pm.test(\"Status is correct\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(pm.environment.get(\"STATUS\"));\r",
							"});\r",
							"pm.test(\"Order is not been shipped yet\", function () {\r",
							"    pm.expect(jsonData.complete).to.eql(pm.environment.get(\"COMPLETE\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be Okay to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.not.be.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should be in the correct format\", function () {\r",
							"    let jsonResponse = pm.response.json();\r",
							"    pm.expect(jsonResponse.id).to.be.a('number');\r",
							"    pm.expect(jsonResponse.petId).to.be.a('number');\r",
							"    pm.expect(jsonResponse.quntity).to.be.a('number');\r",
							"    pm.expect(jsonResponse.shipDate).to.be.a('string');\r",
							"    pm.expect(jsonResponse.status).to.be.a('string');\r",
							"    pm.expect(jsonResponse.complete).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"pm.test(\"Deletion Code is correct\", function () {\r",
							"    pm.expect(jsonData.code).to.eql(200);\r",
							"});\r",
							"pm.test(\"Deletion Type is correct\", function () {\r",
							"    pm.expect(jsonData.type).to.eql(\"unknown\");\r",
							"});\r",
							"\r",
							"// need to convert number to string here\r",
							"pm.test(\"Deletion MessegeID is correct\", function (){\r",
							"    pm.expect(jsonData.messege).to.eql(\"\" + pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Correct order is found\", function () {\r",
							"    pm.expect(jsonData.code).to.not.eql(400);\r",
							"    pm.expect(jsonData.code).to.not.eql(404);\r",
							"    pm.expect(jsonData.code).to.not.eql(500);\r",
							"    pm.expect(jsonData.message).to.not.eql(\"Order not found\");\r",
							"});\r",
							"\r",
							"pm.test(\"Not one of wrong Code\", function () {\r",
							"    pm.expect(pm.response.code).to.not.oneOf([400, 404, 500]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order/{{ID}}",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order",
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check deleted order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response size is less than 500 B\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Methods\", \"GET, POST, DELETE, PUT\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Headers\", \"Content-Type, api_key, Authorization\");\r",
							"    pm.response.to.have.header(\"Server\", \"Jetty(9.2.9.v20150224)\");\r",
							"});\r",
							"\r",
							"// create const jsonData to improve and short the code\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"ID is correct\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"ID\"));\r",
							"});\r",
							"pm.test(\"PETID is correct\", function () {\r",
							"    pm.expect(jsonData.petId).to.eql(pm.environment.get(\"PETID\"));\r",
							"});\r",
							"pm.test(\"Quantity is correct\", function () {\r",
							"    pm.expect(jsonData.quantity).to.eql(pm.environment.get(\"QTY\"));\r",
							"});\r",
							"pm.test(\"Status is correct\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(pm.environment.get(\"STATUS\"));\r",
							"});\r",
							"pm.test(\"Order is not been shipped yet\", function () {\r",
							"    pm.expect(jsonData.complete).to.eql(pm.environment.get(\"COMPLETE\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be Okay to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.not.be.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should be in the correct format\", function () {\r",
							"    let jsonResponse = pm.response.json();\r",
							"    pm.expect(jsonResponse.id).to.be.a('number');\r",
							"    pm.expect(jsonResponse.petId).to.be.a('number');\r",
							"    pm.expect(jsonResponse.quntity).to.be.a('number');\r",
							"    pm.expect(jsonResponse.shipDate).to.be.a('string');\r",
							"    pm.expect(jsonResponse.status).to.be.a('string');\r",
							"    pm.expect(jsonResponse.complete).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"pm.test(\"Deletion Code is correct\", function () {\r",
							"    pm.expect(jsonData.code).to.eql(404);\r",
							"});\r",
							"pm.test(\"Deletion Type is correct\", function () {\r",
							"    pm.expect(jsonData.type).to.eql(\"unknown\");\r",
							"});\r",
							"\r",
							"// need to convert number to string here\r",
							"pm.test(\"Deletion MessegeID is correct\", function (){\r",
							"    pm.expect(jsonData.messege).to.eql(\"\" + pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Correct order is found\", function () {\r",
							"    pm.expect(jsonData.code).to.not.eql(200);\r",
							"    pm.expect(jsonData.code).to.not.eql(404);\r",
							"    pm.expect(jsonData.code).to.not.eql(500);\r",
							"    pm.expect(jsonData.message).to.not.eql(\"Order not found\");\r",
							"});\r",
							"\r",
							"pm.test(\"Not one of wrong Code\", function () {\r",
							"    pm.expect(pm.response.code).to.not.oneOf([200, 404, 500]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://petstore.swagger.io/v2/store/order/{{ID}}",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"store",
						"order",
						"{{ID}}"
					]
				}
			},
			"response": []
		}
	]
}